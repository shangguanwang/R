#alphabet 后面的字母>前面的。大写>小写
#can compare each element of a vector(matrix) to one number or compare two vectors

# The social data has been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE) ####

if (condition) {expr1} else if (condition) {expr2} else{expr3}
while (condition) {expr} if (condition) {break}

# Code the while loop  不需要逗号，是<-
while (speed>30 ) {print("Slow down!")   
speed<-speed-7}
-----------------------------------paste() -glue together
## When passing a single vector, paste work like as.character.
paste(1:12)        # same
as.character(1:12) # same
> paste("A", 1, "%")       #A bunch of individual character strings.
[1] "A 1 %"
> paste(1:4, letters[1:4]) #2 or more vectors pasted element for element.
[1] "1 a" "2 b" "3 c" "4 d"
> paste(1:10, collapse="") #One vector smushed together.
[1] "12345678910"

a <- c("a","b","c")
b <- c("y","w","q")
paste(a,b,sep = "_")
**output**
"a_y" "b_w" "c_q"
---------------------------------Throw In More Conditions
# Initialize the speed variable
speed <- 64
# Extend/adapt the while loop
while (speed > 30) {
  print(paste("Your speed is",speed))
  
  # Break the while loop when speed exceeds 80
  if (speed>80 ) {break }
  
  if (speed>48 ) {print("Slow down big time!")
  speed<-speed-11
  
  } else {print("Slow down!") 
  speed<-speed-6 }}
  -------------------------------- divisible %%
  # Code the while loop
while (i <= 10) {
  print(3*i)
  if ( 3*i %%8==0) {break
    
  }
  i <- i + 1
}
############################## for (x_variable in vector/list_sequence) {expression}
-----------next() skip a loop, go to the next loop in the for loop
## **** need double square brackets - [[ ]] - to select the list elements
------------Loop over a matrix -nested loop for(row) {for(col) {execution}} ------------------ matrix index [col,row]
# The tic-tac-toe matrix ttt has already been defined for you
# define the double for loop
for (i in 1:nrow(ttt)) {
  for (j in 1:ncol(ttt)) {
    print(paste("On row",i,"and column", j,"the board contains", ttt[i,j]))
  }}
############################# next, break
# The linkedin vector has already been defined for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)

# Extend the for loop
for (li in linkedin) {
  if (li > 10) {
    print("You're popular!")
  } else {
    print("Be more visible!")
  }
  
  # Add if statement with break
  if(li<5) {
  print("This is too embarrassing!")
  next}
  
  # Add if statement with next
  else if (li>16) {print("This is ridiculous, I'm outta here!") 
  break}
  
  print(li)
}
######################  Build a for loop from scratch   ###########
# Pre-defined variables
rquote <- "r's internals are irrefutably intriguing"
chars <- strsplit(rquote, split = "")[[1]]

# Initialize rcount
rcount <- 0

# Finish the for loop
for (char in chars) { if(char=="r"){rcount=rcount+1}
else if(char=="u"){break}
}
-------------------------------  Functions ------
input goes to blackbox to output
sd (x=,na.rm=TRUE) 
help(sd) / ?sd

my_fun <- function(arg1, arg2 = val2) {
  body
}
############################## write your own function 3
# Finish the pow_two() function
pow_two <- function(x, print_info=TRUE) {
  y <- x ^ 2
  if (print_info==TRUE) {print(paste(x, "to the power two equals", y))}
  return(y)
}
#################
 #function scoping: It implies that variables that are defined inside a function are not accessible outside that function.
 # sample(1:6,size=1) #$$$$ randomly reorders the elements, size==pick 1 element
 
 two_dice <- function() {
  possibilities <- 1:6
  dice1 <- sample(possibilities, size = 1)
  dice2 <- sample(possibilities, size = 1)
  dice1 + dice2
}
#R passes arguments by value and not by reference, the value of count is not changed after the first two calls of increment(). 
#Only in the final expression, where count is re-assigned explicitly, does the value of count change.

search()
require() # library if package not installed 
# check out the currently attached packages 
######################
-------------------------------  Lapply always return a list unlist(lapply(data,function,arguments)) ------
-------------------------------avoid for loop, apply function to every element of a list or vector---------
 lapply(datalist,class) #apply function class to the data
## 
num_chars<-c()
for (i in 1:length(cities)) {num_chars[i]<-nchar(cities[i])
}
##
unlist(lapply(datavector, nchar)) #return a vector of each element's length of dataset
########################
# The vector pioneers has already been created for you
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")

# Split names from birth year
split_math <- strsplit(pioneers, split = ":")

# Convert to lowercase strings: split_low
split_low<-lapply(split_math, tolower)
-----------------------lapply and anonymous functions只需要用一次无需assign function name ------------------------
# Named function
triple <- function(x) { 3 * x }

# Anonymous function with same implementation
function(x) { 3 * x }

# Use anonymous function inside lapply()
lapply(list(1,2,3), function(x) { 3 * x })
##########################
# Definition of split_low
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
split <- strsplit(pioneers, split = ":")
split_low <- lapply(split, tolower)

# Transform: use anonymous function inside lapply

names <- lapply(split_low, function(x){x[1]})

# Transform: use anonymous function inside lapply

years <- lapply(split_low, function(x){x[2]})
#########################lapply() always returns a list, no matter the input
------------------------- sapply-------------------------- result clear, unlike lapply return lists anyway
sapply(datacity, nchar,USE.NAMES=FALSE) #simplify result of lapply, convert result to a one-dimentional array=vector
#NAMES=FALSE, don't contain name
--------sapply can't simplify, now what?
#sapply can be dangerous due to simplification
#function below_zero() takes a vector of numerical values and returns a vector that only contains the values that are strictly below zero.
#Given that the length of the output of below_zero() changes for different input vectors, sapply() is not able to nicely convert the output of lapply() to a nicely formatted matrix. 
#Instead, the output values of sapply() and lapply() are exactly the same, as shown by the TRUE output of identical().

# Definition of below_zero()
below_zero <- function(x) {
  return(x[x < 0])
}

# Apply below_zero over temp using sapply(): freezing_s
freezing_s<-sapply(temp,below_zero)

# Apply below_zero over temp using lapply(): freezing_l
freezing_l<-lapply(temp,below_zero)

# Are freezing_s and freezing_l identical?
identical(freezing_s,freezing_l)
################################
#sapply() does not simplify the list of NULL's. That's because the 'vector-version' of a list of NULL's would simply be a NULL, which is no longer a vector with the same length as the input. 
#cat(x) #like print
cat("Miaow")
>Miaow
cat(LETTERS)

# Definition of print_info()
print_info <- function(x) {
  cat("The average temperature is", mean(x), "\n")
}

# Apply print_info() over temp using sapply()
sapply(temp,print_info)

# Apply print_info() over temp using lapply()
lapply(temp,print_info)
------------------------------ vapply () need to specify type_output(3), a more robust version of sapply() -------------------
numeric(1) #numeric vector of length 1
character(2) #character vector of length 2

########### use vapply ############
vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)
#The FUN.VALUE argument expects a template for the return argument of this function FUN

# Definition of basics() takes a vector, and returns a named vector of length three
basics <- function(x) {
  c(min = min(x), mean = mean(x), max = max(x))
}

# Apply basics() over temp using vapply()
vapply(temp,basics,numeric(3))
###################################From sapply to vapply# Convert to vapply() expression
robust（稳健性）包括两种含义：效度的稳健性（robustness of validity）简单理解是数据微小的波动，不会对估计量造成剧烈的影响、效率的稳健性（robustness of efficiency）

vapply(temp, max, numeric(1))

# Convert to vapply() expression
vapply(temp, function(x, y) { mean(x) > y }, y = 5,logical(1))
#############################
------------------------------------Utilities----------------------------------------
------------------------------------useful functions-----------
R features a bunch of functions to juggle around with data structures::

seq(): Generate sequences, by specifying the from, to and by arguments.
rep(): Replicate elements of vectors and lists.
sort(): Sort a vector in ascending order. Works on numerics, but also on character strings and logicals.
rev(): Reverse the elements in a data structures for which reversal is defined.
str(): Display the structure of any R object.
append(): Merge vectors or lists.
is.*(): Check for the class of an R object.
as.*(): Convert an R object from one class to another.
unlist(): Flatten (possibly embedded) lists to produce a vector.
-----------------------------------------------------
mean(c(sum(round(abs(v1))),sum(round(abs(v2)))))
li<-list(log=TRUE,ch="hello",int_vec=sort(rep(seq(8,2,by=-2),times=2)))
seq(start,end,by= )
rep(x, each= 2) #replicate twice
sort(rep(c(8,6,4,2),times=2), decreasing=TRUE) #from large to small
is.list(data) #check type
li2<as.list(c(1,2,3)) #convert vector to list
unlist(list) #convert list to vector
append( )#add elements to list
rev ( ) #reverse order
#--------------Regular Expressions-pattern-handy when cleaning data -------------
#metacharacter
grepl(pattern="a", vector) #contain a
grepl(pattern="^a",vector) #start with a
grepl(pattern="a$",vector) #end with a
pattern="a|i" #or

grep( ) #return index==which (grepl(pattern, vector))
?regex #regular expression

sub(pattern, replacement, vector) #replace
#################
#grepl(), which returns TRUE when a pattern is found in the corresponding character string.
#grep(), which returns a vector of indices of the character strings that contains the pattern.
#Both functions need a pattern and x argument, where pattern is the regular expression you want to match for, and the x argument is the character vector from which matches should be sought.

# The emails vector has already been defined for you
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
            "invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")

# Use grepl() to match for "edu"
grepl(pattern="edu",x=emails)

# Use grep() to match for "edu", save result to hits
hits<-grep(pattern="edu",x=emails)

# Subset emails using hits
emails[hits]
##########################
You can use the caret, ^, and the dollar sign, $ to match the content located in the start and end of a string
@, because a valid email must contain an at-sign.
.*, which matches any character (.) zero or more times (*). Both the dot and the asterisk are metacharacters. You can use them to match any character between the at-sign and the ".edu" portion of an email address.
\\.edu$, to match the ".edu" part of the email at the end of the string. The \\ part escapes the dot: it tells R that you want to use the . as an actual character.

# Use grepl() to match for .edu addresses more robustly
grepl(pattern="@.*\\.edu$",x=emails) #.* any character any length
--------------------------------------------
.*: A usual suspect! It can be read as "any character that is matched zero or more times".
\\s: Match a space. The "s" is normally a character, escaping it (\\) makes it a metacharacter.
[0-9]+: Match the numbers 0 to 9, at least once (+).
([0-9]+): The parentheses are used to make parts of the matching string available to define the replacement. The \\1 in the replacement argument of sub() gets set to the string that is captured by the regular expression [0-9]+
\\1 in the replacement argument of sub() gets set to the string that is captured by the regular expression [0-9]+
--------------------------------------------
sub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
#The ([0-9]+) selects the entire number that comes before the word “nomination” in the string, and the entire match gets replaced by this number because of the \\1 that reference to the content inside the parentheses
-------------------------------------------------  Times and Dates---------------------------------------------------------------------
Sys.Date() #CAPITALIZE #ask today, class is Date, a special type of object
Sys.time()

as.Date("string") #convert character-string to a date-object
as.POSIXct("string") 
default format "%Y-%m-%d"
%Y=4-digit year
%m=2-digit month
%d=2-digit day

my_date<-as.Date("1960-30-01", format="%Y-%d-%m")
my_date+1

unclass(date_object) # xxx days from that day
unclass(my_time)

#lubridate, zoo, xts packages
--------------------------- Create and format dates
To create a Date object from a simple character string in R, you can use the as.Date() function. The character string has to obey a format that can be defined using a set of symbols (the examples correspond to 13 January, 1982):

%Y: 4-digit year (1982)
%y: 2-digit year (82)
%m: 2-digit month (01)
%d: 2-digit day of the month (13)
%A: weekday (Wednesday)
%a: abbreviated weekday (Wed)
%B: month (January)
%b: abbreviated month (Jan)
The following R commands will all create the same Date object for 13 January, 1982:

as.Date("1982-01-13")
as.Date("Jan-13-82", format = "%b-%d-%y")
as.Date("13 January, 1982", format = "%d %B, %Y")
Notice that the first line here did not need a format argument, because by default R matches your character string to the formats "%Y-%m-%d" or "%Y/%m/%d".

In addition to creating dates, you can also convert dates to character strings that use a different date notation. For this, you use the format() function. 
Try the following lines of code:
today <- Sys.Date()
format(Sys.Date(), format = "%d %B, %Y")
format(Sys.Date(), format = "Today is a %A!")
---------------------------------------
instruction: 
In the editor on the right, three character strings representing dates have been created. Convert them to dates using as.Date(), and assign them to date1, date2, and date3 respectively. The code for date1 is already included.
Extract useful information from the dates as character strings using format(). From the first date, select the weekday. From the second date, select the day of the month. From the third date, you should select the abbreviated month and the 4-digit year, separated by a space.

# Definition of character strings representing dates
str1 <- "May 23, '96"
str2 <- "2012-03-15"
str3 <- "30/January/2006"

# Convert the strings to dates: date1, date2, date3
date1 <- as.Date(str1, format = "%b %d, '%y")
date2<-as.Date(str2, format="%Y-%m-%d")
date3<-as.Date(str3, format="%d/%B/%Y")

# Convert dates to formatted strings
format(date1, "%A")
format(date2,"%d")
format(date3,"%b %Y")
------------------------Create and format times------------
use as.POSIXct() to convert from a character string to a POSIXct object, and format() to convert from a POSIXct object to a character string. Again, you have a wide variety of symbols:

%H: hours as a decimal number (00-23)
%I: hours as a decimal number (01-12)
%M: minutes as a decimal number
%S: seconds as a decimal number
%T: shorthand notation for the typical format %H:%M:%S
%p: AM/PM indicator
For a full list of conversion symbols, consult the strptime documentation in the console:

?strptime
Again,as.POSIXct() uses a default format to match character strings. In this case, it's %Y-%m-%d %H:%M:%S
################## instructions ###############
Convert two strings that represent timestamps, str1 and str2, to POSIXct objects called time1 and time2.
Using format(), create a string from time1 containing only the minutes.
From time2, extract the hours and minutes as "hours:minutes AM/PM". Refer to the assignment text above to find the correct conversion symbols!

# Definition of character strings representing times
str1 <- "May 23, '96 hours:23 minutes:01 seconds:45"
str2 <- "2012-3-12 14:23:08"

# Convert the strings to POSIXct objects: time1, time2
time1 <- as.POSIXct(str1, format = "%B %d, '%y hours:%H minutes:%M seconds:%S")
time2<-as.POSIXct(str2, format="%Y-%m-%d %T")

# Convert times to formatted strings
format(time1,"%M")
format(time2, "%I:%M %p")
####################################### Calculations with Dates
today <- Sys.Date()
today + 1
today - 1

as.Date("2015-03-12") - as.Date("2015-02-27")
############## instructions
#Calculate the number of days that passed between the last and the first day you ate pizza. Print the result.
#Use the function diff() on pizza to calculate the differences between consecutive pizza days. Store the result in a new variable day_diff.
#Calculate the average period between two consecutive pizza days. Print the result.

>day5
[1] "2017-04-11"
# Difference between last and first pizza day
print(day5-day1)

# Create vector pizza
pizza <- c(day1, day2, day3, day4, day5)

# Create differences between consecutive pizza days: day_diff
day_diff<-diff(pizza)

# Average period between two consecutive pizza days
mean(day_diff)
########################### calculations with Times #######
now <- Sys.time()
now + 3600        # add an hour
now - 3600*24     # subtract a day
Adding or substracting time objects is also straightforward:

birth <- as.POSIXct("1879-03-14 14:37:23")
death <- as.POSIXct("1955-04-18 03:47:12")
einstein <- death - birth
einstein

#######instructions
# Calculate the difference between login and logout: time_online
time_online<-logout-login

# Inspect the variable time_online
print(time_online)

# Calculate the total time online
sum(time_online)

# Calculate the average time online
mean(time_online)
#############################Time is of the essence
Use as.Date() to convert the astro vector to a vector containing Date objects. You will need the %d, %b and %Y symbols to specify the format. Store the resulting vector as astro_dates.
Use as.Date() to convert the meteo vector to a vector with Date objects. This time, you will need the %B, %d and %y symbols for the format argument. Store the resulting vector as meteo_dates.
With a combination of max(), abs() and -, calculate the maximum absolute difference between the astronomical and the meteorological beginnings of a season, i.e. astro_dates and meteo_dates. Simply print this maximum difference to the console output.

# Convert astro to vector of Date objects: astro_dates
astro_dates<-as.Date(astro, format="%d-%b-%Y")

# Convert meteo to vector of Date objects: meteo_dates
meteo_dates<-as.Date(meteo, format="%B %d, %y")

# Calculate the maximum absolute difference between astro_dates and meteo_dates
max(abs(astro_dates-meteo_dates))
