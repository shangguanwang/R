# bell-shaped curve, otherwise known as the Gaussian distribution
#normal distribution: the likelihood of observing data values decreases as we move out from the mean.
#histogram: constructed by dividing the range of data into subsets or bins,counting # of values in that bin. Height represents the # of observations in that bin.
#density plot: normalized and smoothed histogram.
#Normal QQ-plot: constructed by first sorting the data from smallest to largest. Then plotting them against an x-axis derived from Gaussian distribution. From Gaussian points, these should be very close to the solid line.
##################
#Use the par() function to set the mfrow parameter for a side-by-side array of two plots.
#Use the hist() function to generate a histogram of the Horsepower variable from the Cars93 data frame. Set its main argument equal to the title of the plot, "hist() plot".
#Use the truehist() function to generate an alternative histogram of the same variable. Title this plot, "truehist() plot" by specifying its main argument accordingly.

# Set up a side-by-side plot array
#R makes it easy to combine multiple plots into one overall graph, using either the par( ) or layout( ) function.
#With the par( ) function, you can include the option mfrow=c(nrows, ncols) to create a matrix of nrows x ncols plots that are filled in by row. mfcol=c(nrows, ncols) fills in the matrix by columns.
#http://www.statmethods.net/advgraphs/layout.html
par(mfrow=c(1,2)) #两图并列放一起 

# Create a histogram of counts with hist()
hist(Cars93$Horsepower,main="hist() plot")

# Create a normalized histogram with truehist()
truehist(Cars93$Horsepower,main="truehist() plot")
################
#Create the variable index16 using the which() function that selects records from the ChickWeight data frame with Time equal to 16.
#Create the variable weights that gives the weights of the 16-week old chicks.
#Use the truehist() function to generate a histogram from weights.
#Use the lines() and density() functions to overlay a density plot of the weights values on the histogram.

# Create index16, pointing to 16-week chicks
index16<-which(ChickWeight$Time==16)

# Get the 16-week chick weights
weights<-ChickWeight$weight[index16]

# Plot the normalized histogram
truehist(weights)

# Add the density curve to the histogram
lines(density(weights))  
###########################
#The points lie in a relatively straight line only if the data is normally distributed (ie. Its density plot is approximately a Gaussian distribution).
#A practical limitation of both histograms and density estimates is that, if we want to know whether the Gaussian distribution assumption is reasonable for our data, it is difficult to tell.
#The quantile-quantile plot, or QQ-plot, is a useful alternative: we sort our data, plot it against a specially-designed x-axis based on our reference distribution (e.g., the Gaussian "bell curve"), and look to see whether the points lie approximately on a straight line. 
#In R, several QQ-plot implementations are available, but the most convenient one is the qqPlot() function in the car package.

# Load the car package to make qqPlot() available
library(car)

# Create index16, pointing to 16-week chicks
index16<-which(ChickWeight$Time==16)

# Get the 16-week chick weights
weights<-ChickWeight$weight[index16]

# Show the normal QQ-plot of the chick weights
qqPlot(weights)

# Show the normal QQ-plot of the Boston$tax data
library(MASS)
qqPlot(Boston$tax)
####################################################Visualizing relations between two variables###############
#Scatterplot
library(MASS)
plot(y ~ x, data=dataframe)
#sunflowerplot:presence of repeated points in a dataset. One petal for each repated point.
#both sunflowerplot and scatterplot are appropriate when x and y are numeric. When y is numeric and x is either categorical or numeric with very few distinct levels, use boxplot.
library(MASS)
boxplot(y~x,data=df,log="y",las=1,xlab="red") #las=1, want x lables horizontal
title("letter")
#Mosaic plots-relationship between two variables, both take few distinct levels. e.g. two categorical
mosaicplot(y~x,data=df,main="title")
#################################
#A scatterplot represents each (x, y) pair in a dataset by a single point. If some of these pairs are repeated (i.e. if the same combination of x and y values appears more than once and thus lie on top of each other), we can't see this in a scatterplot. Several approaches have been developed to deal with this problem, including jittering, which adds small random values to each x and y value, so repeated points will appear as clusters of nearby points.
#A useful alternative that is equally effective in representing repeated data points is the sunflowerplot, which represents each repeated point by a "sunflower," with one "petal" for each repetition of a data point.

#Use the par() function to set the mfrow parameter for a side-by-side plot array.
#For the left-hand plot, use the plot() function to construct a scatterplot of the rad variable versus the zn variable, both from the Boston data frame in the MASS package.
#Use the title() function to add the title "Standard scatterplot" to this plot.
#For the right-hand plot, apply the sunflowerplot() function to the same data to see the presence of repeated data points, not evident from the scatterplot on the left.
#Use the title() function to add the title "Sunflower plot".
# Set up a side-by-side plot array
par(mfrow=c(1,2))

# Create the standard scatterplot
library(MASS)
plot(Boston$zn, Boston$rad)
# Add the title
title("Standard scatterplot")

# Create the sunflowerplot
sunflowerplot(Boston$zn, Boston$rad)

# Add the title
title("Sunflower plot")

##############################  boxplot
# Create a variable-width boxplot with log y-axis & horizontal labels
boxplot(crim~rad,data=Boston, varwidth=TRUE,log="y", las=1)
#varwidth=TRUE to make boxplot widths proportional to the square root of the samples sizes. Add horizontal=TRUE to reverse the axis orientation.

################################A mosaic plot may be viewed as a scatterplot between categorical variables
#this plot can also be useful in understanding the relationship between numerical variables, either integer- or real-valued, that take only a few distinct values.
# Create a mosaic plot using the formula interface
#mosaicplot(carb~cyl,data=mtcars)  # y~x
#########################################################################Showing more complex relations between variables
#bagplots:two-dimensional boxplot
#the red star at the center corresponds to the median line. The dark-blue interior corresponds to the box,contain 50% of data. Points outside are outliers.

#Correlation coefficient between each pair of varialbe examines relationships between more than two numeric variables. [-1,1] 0=unrelated

mtCor<-cor(df-mtcars)
library(corrplot)
corrplot(mtCor, method="ellipse") #ellipse downwards mean r close to -1, ellipse upwards means r close to 1, circle means r close to 0

#decision tree-rattle
library(rpart) #rpart used to plot decison tree
treeModel<-rpart(mpg~., data=df)
plot(treeModel)
text(treeModel,cex=1.6,col="red",xpd=TRUE)
###############################################Using the bagplot() function
boxplot(varaible,variable)

# Create a side-by-side boxplot summary
boxplot(Cars93$Min.Price,Cars93$Max.Price)
# Load aplpack to make the bagplot() function available
library(aplpack)

# Create a bagplot for the same two variables
bagplot(Cars93$Min.Price,Cars93$Max.Price,cex=1.2)
#Use the cex parameter to make the point sizes in this plot 20 percent larger than the default size.

# Add an equality reference line
#Use the abline() function to add a dashed equality reference line with intercept 0 and slope 1.
abline(a=0,b=1,lty=2) #a is intercept, b is slope, linetype is lty=dashline 2
################################################Plotting correlation matrices with the corrplot() function
#Apply the cor() function to this subset to compute the correlation matrix containing the correlation coefficients between all variable pairs. Save the result as corrMat.
#Apply the corrplot() function to display this correlation matrix, using the "ellipse" method.

# Load the corrplot library for the corrplot() function
library(corrplot)

# Extract the numerical variables from UScereal
numericalVars<-UScereal[2:10]

# Compute the correlation matrix for these variables (all variables, two-two comparison)
corrMat<-cor(numericalVars)

# Generate the correlation ellipse plot
corrplot(corrMat,method="ellipse")
######################################Building and plotting rpart() models
#Load the rpart package to make the rpart() modeling function and the associated methods for generic functions like plot() available.
#Use the rpart() function to fit a decision tree model tree_model that predicts medv in the Boston data frame from all of the other variables in this data frame.
#Apply the plot() function to tree_model to obtain an unlabelled plot of the structure of this decision tree model.
#Apply the text() function to tree_model to label this plot. To make the labels easier to read, use the cex parameter to reduce the text to 70% of the default size.

# Load the rpart library
library(rpart)

# Fit an rpart model to predict medv from all other Boston variables
tree_model<-rpart(medv~.,data=Boston)

# Plot the structure of this decision tree model
plot(tree_model)

# Add labels to this plot
text(tree_model,cex=0.7)
