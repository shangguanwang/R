#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$   Manipulation ############################################
CREATE TABLE creates a new table.
INSERT INTO adds a new row to a table.
SELECT queries data from a table.
UPDATE edits a row in a table.
ALTER TABLE changes an existing table. #ADD COLUMN
DELETE FROM deletes rows from a table.
-------------------------------------------------------Summary----------
SELECT col1,col2 FROM tablename;
SELECT DISTINCT col FROM table;
SELECT * FROM tablename WHERE col LIKE 'na_e';
SELECT * FROM tablename WHERE col BETWEEN xx AND yy;
SELECT * FROM tablename ORDER BY colname DESC LIMIT 7; # descending order from high to low # ascending order. ASC # only want 7 entries
CREATE TABLE name(colname1 TYPE, colname2 TYPE, colname3 TYPE);
INSERT INTO tablename(col1,col2,col3) VALUES (val1, val2, val3);

UPDATE tablename
SET col3=val3
WHERE col1=val1;

ALTER tablename ADD COLUMN colname TYPE;

DELETE FROM tablename WHERE colname IS NULL;

------------------------------------------------------------------------
#'Structured Query Language', is a programming language designed to manage data stored in relational databases.
#All commands: https://www.codecademy.com/articles/sql-commands?r=master
#A relational database is a database that organizes information into one or more tables.Tables are sometimes referred to as relations. 
#By convention, commands=clauses are written in capital letters. 

#Some of the most common data types are:
#1. Integer, a positive or negative whole number 
#2. Text, a text string 
#3. Date, the date formatted as YYYY-MM-DD for the year, month, and day 
#4. Real, a decimal value 
---------------------------------
SELECT * FROM celebs;       #select all cols from the table celebs, ***Statements always end in a semi-colon ; 一定要有分号***
---------------------------------
CREATE TABLE celebs(id INTEGER, name TEXT, age INTEGER);
CREATE TABLE table_name (
    column_1 data_type, 
    column_2 data_type, 
    column_3 data_type
  );
----------------------------------
INSERT INTO celebs (id, name, age) VALUES (1, 'Justin Bieber', 21);  #*** quotation marks "TEXT"
INSERT INTO celebs(id, name, age) VALUES (2,"Beyonce Knowles",33);
INSERT INTO celebs(id, name, age) VALUES (3, 'Jeremy Lin', 26);
INSERT INTO celebs(id, name, age) VALUES (4, 'Taylor Swift',26);

SELECT name FROM celebs;
---------------------------------
UPDATE celebs
SET age=22
WHERE id=1;
 
SELECT * FROM celebs;
=======================
UPDATE celebs 
SET twitter_handle="@taylorswift13"
WHERE id=4;

SELECT * FROM celebs;
---------------------------------
ALTER TABLE celebs ADD COLUMN twitter_handle TEXT;

SELECT * FROM celebs;
---------------------------------
UPDATE celebs 
SET twitter_handle = '@taylorswift13' 
WHERE id = 4; 

DELETE FROM celebs WHERE twitter_handle IS NULL; #####****

SELECT * FROM celebs;
---------------------------------- $$$$$$$$$$$$$$$$$$$$$$$$$ Query $$$$$$$$$$$$$$$$$$$$$$$$$----------------------------
Summary:
SELECT is the clause you use every time you want to query information from a database.
WHERE is a popular command that lets you filter the results of the query based on conditions that you specify.
LIKE and BETWEEN are special operators that can be used in a WHERE clause
AND and OR are special operators that you can use with WHERE to filter the query on two or more conditions.
ORDER BY lets you sort the results of the query in either ascending or descending order.
LIMIT lets you specify the maximum number of rows that the query will return. This is especially important in large tables that have thousands or even millions of rows.
------------------------------------------------------------------------------------
SELECT DISTINCT col FROM tablename
#returns unique values in the specified column(s)
SELECT DISTINCT genre FROM movies;
---------------------------------
SELECT * FROM movies WHERE imdb_rating >8;

#Common operators used with the WHERE clause are:
= equals
!= not equals
> greater than
< less than
>= greater than or equal to
<= less than or equal to
---------------------------------
#LIKE is a special operator that can be used in a WHERE clause
#Se_en represents a pattern with a wildcard character. The _ means you can substitute any individual character here without breaking the pattern. The names Seven and Se7en both match this pattern.
SELECT * FROM movies
WHERE name LIKE 'Se_en';  #pick row with name=='Se_en'  # _ means any character

SELECT * FROM movies
WHERE name LIKE 'a%';   # a% begin with the letter "A" #%a end with "a"

#any movie that contains the word "man" in its name will be returned in the result set. Notice, that LIKE is not case sensitive. "Batman" and "Man Of Steel" both appear in the result set.
SELECT * FROM movies
WHERE name LIKE '%man%';  
--------------------------------- BETWEEN
#The BETWEEN operator is used to filter the result set within a certain range. The values can be numbers, text or dates.
#only include movies with names that begin with letters "A" [up to but not including "J".]
SELECT * FROM movies 
WHERE name BETWEEN 'A' AND 'J';

# only include movies with years between 1990 up to and including 2000.
WHERE year BETWEEN 1990 AND 2000;

SELECT * FROM movies 
WHERE year BETWEEN 1990 AND 2000
AND genre='comedy';

SELECT * FROM movies
ORDER BY imdb_rating DESC;

# specify the maximum number of rows the result set will have. 
SELECT * FROM movies
ORDER BY imdb_rating ASC
LIMIT 3;  

---------------------------------- $$$$$$$$$$$$$$$$$$$$$$$$$ Aggregate Functions $$$$$$$$$$$$$$$$$$$$$$$$$----------------------------

