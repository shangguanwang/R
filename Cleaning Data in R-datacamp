# R
# the first several rows of a matrix or data frame using head, and use tail to obtain the last several rows. 
head(x, n=6) #default is 6 rows
x – A matrix, data frame, or vector.
n – The first n rows

tail(weather, 50)
str(weather) #can be called on any object # rows-observations, col-variables #list each columns
#############################
class(file) #check type
dim(file) #return r & c
names(file) #column names

load(dplyr)
glimpse(file) #better version of str
summary(file) #5 number summary of each column
#tables in R often have the type data.frame
################################
hist(dataframe$column) #visualize the frequency of a variable
plot(dataframe$x,dataframe$y) #scatterplot
#################################################################### Gather-make wide longer
#tidying: structuring datasets to facilitate analysis.
#messy data example: coloumn headers are values, not variable names
#tidyr data #https://blog.rstudio.org/2014/07/22/introducing-tidyr/
#gather:used when you have columns that are not variables and you want to collapse them into key-value pairs.
#turn coloumn names into values of a new variable use gather
gather(dataframe,newcol-variable, newcol-value,-col) #-col means leave the col column
# key是宽数据变为长数据时存放需要编码的variable name, value是需要数据转换的变量的value. 
#把横的变成竖的，第二个argument把横的header变成一个column的value，第三个argument把横的value变成一个column
################
#This is useful when values in a column should actually be column names (i.e. variables)
spread(dataset,key,value)
#the second argument takes the name of the column to spread into new columns (type), and the third argument takes the column that contains the value with which to fill in the newly spread out columns
> pets
     owner type num
1    Jason  dog   2
2    Jason  cat   4
3    Jason bird   3
4     Lisa  dog   7
5     Lisa  cat  10
6     Lisa bird   9
7 Terrence  dog   8
8 Terrence  cat   5
9 Terrence bird   1

> spread(pets,type,num)
     owner bird cat dog
1    Jason    3   4   2
2     Lisa    9  10   7
3 Terrence    1   5   8
################################################################ separate one column to several columns
separate(___, col = ___, into = c("___", "___"), sep = "___") #＃注意引号，vector
separate(dataframe, the column to separate, into new column names,sep="-") #separator specify which character to separate on
unite(dataframe, new column, names of all columns to be joined,sep="-")  #default is underscore_
###############################
#examples of messy data
#values stored in one column should be several column names -spread()
#prmary key in relational table: a single observational unit is stored in multiple tables
#multiple types of observation units are stored in the same
# example: owner and pet in the same table
arrange() the rows of census2 by the YEAR column. #census2 <- arrange(census2, YEAR)

####################Preparing data for analysis#####################################################################################
as.character()
as.integer() #turn numeric to integer
as.numeric()
as.factor()
as.logical()
#lubridate package
library(lubridate)
ymd("_____") #year-month-date
mdy("_____")
hms("_____") #hour-min-seconds
ymd_hms("_____")

# Load the lubridate package
library(lubridate)

# Parse as date
dmy("17 Sep 2015")

# Parse as date and time (with no seconds!)
mdy_hm("July 15, 2012 12:56")

# Coerce dob to a date (with no time)
students2$dob <- ymd(students2$dob)

# Coerce nurse_visit to a date and time
students2$nurse_visit <-ymd_hms(students2$nurse_visit) 
    
# Look at students2 once more with str()
str(students2)
#########################################################string manipulation################################
str_trim("     this is a test       ") #trim leading and trailing white space
str_pad("11111",width=7,side="left",pad="0") #if the lendgth is not 7, pad the left sides with 0 until it's 7 digits #QUOTATION MARK
str_detect(vector,"string") #search for the presence of a string in vector
str_replace(vector,"string being replaced","new one to replace") 
tolower()
toupper()
#########################################################################################
library(stringr)
# Detect all dates of birth (dob) in 1997
str_detect(students2$dob,"1997")

# In the sex column, replace "F" with "Female"...
students2$sex <- str_replace(students2$sex,"F","Female")
#Special values: Inf-"Infinite value", NaN-"Not a number"
#find missing values
any(is.na(dataframe)) #are there any NAs?
summary(dataframe)
complete.cases(dataframe) #find rows with no missing values, return logical values
dataframe[complete.cases(dataframe), ]#subset data, keeping only complete cases
na.omit(dataframe) #remove rows with missing values

# Call table() on the status column
table(social_df$status)

# Replace all empty strings in status with NA
social_df$status[social_df$status == ""] <- NA
# Use complete.cases() to see which rows have no missing values
complete.cases(social_df)

###############outliers
set.seed(10)
x<-c(rnorm(30,mean=15,sd=5),-5,28,35) #normally distributed
boxplot(df,horizontal= TRUE) #default is vertical, one plot for a column

# use Min and Max in summary()
hist(df#column, breaks=20) #number of brackets

# View a histogram of absences, but force zeros to be bucketed to the right of zero
hist(students3$absences,right=FALSE)
#the default of histogram is (a,b]. You can change this with the right=FALSE option, which would change the intervals to be of the form [a,b).  
#This is important if you have a lot of points exactly at the breakpoint.

#########  gather, new col name
column names are values. In particular, the column names X1-X31 represent days of the month, which should really be values of a new variable called day.
> df
  subject age        t1         t2         t3
1       X  34 0.6753014 -0.7438284  0.2333987
2       Y  88 0.3588532  0.9038673 -0.5104356
3       Z  35 0.3971684  0.7129142  1.3817088
> gather(df,time,val,t1:t3)
  subject age time        val
1       X  34   t1  0.6753014
2       Y  88   t1  0.3588532
3       Z  35   t1  0.3971684
4       X  34   t2 -0.7438284
5       Y  88   t2  0.9038673
6       Z  35   t2  0.7129142
7       X  34   t3  0.2333987
8       Y  88   t3 -0.5104356
9       Z  35   t3  1.3817088
#################################### spread(df,newcol,colname-newvalue under the column)
values are variable names. 
 values in the measure column should be variables (i.e. column names)
 when you do dataframe[, -1] you get the sub-array that does not include the first column.
weather2 <- weather2[, -1]  # remove the first column of a dataframe

# Load the stringr and lubridate packages
library(stringr)
library(lubridate)


# Remove X's from day column
weather3$day <- str_replace(weather3$day,"X","")

# Unite the year, month, and day columns
weather4 <- unite(weather3, date, year, month,day, sep = "-")

# Convert date column to proper date format using lubridates's ymd()
weather4$date <- ymd(weather4$date)

# Rearrange columns using dplyr's select()
weather5 <- select(weather4, date, Events, CloudCover:WindDirDegrees)

# View the head of weather5
head(weather5)
#####################################
which(is.na(x$b)) #find indices of missing values in column b

# Count missing values
sum(is.na(weather6))

# Find missing values
summary(weather6)

# Find indices of NAs in Max.Gust.SpeedMPH
ind <- which(is.na(weather6$Max.Gust.SpeedMPH))

# Look at the full rows for records missing Max.Gust.SpeedMPH
weather6[ind, ]

##################################################################
# Find row with Max.Humidity of 1000
ind <- which((weather6$Max.Humidity==1000))

# Look at the data for that day
weather6[ind, ]

# Change 1000 to 100
weather6$Max.Humidity[ind] <-100
####################################################################
# Get index of row with -1 value
ind <- which(weather6$Mean.VisibilityMiles==-1)

# Look at full row
weather6[ind,]  #index matrix need two elements, rows and columns

# Set Mean.VisibilityMiles to the appropriate value
weather6$Mean.VisibilityMiles[ind] <- 10
##############################################################
names(df)<-vector of names
df$col[df$col=="oldvalue"]<-"Newvalue"
