#tbl-a special type of data.frame
tbl_df(dataframe) #only display lines that will fit your window, cut rows and columns, display dims and names
glimpse(dataframe)

#### Convert data.frame to table  tbl_df()
# Convert the hflights data.frame into a hflights tbl
hlights<-tbl_df(hflights)

# Display the hflights tbl
hflights

# Create the object carriers
carriers<-hlights$UniqueCarrier
#### ????????????????????????????????Changing labels of hflights, part 1 of 2
#### df$New_col<-lut[df$old_col] ###########
lut <- c("AA" = "American", 
         "AS" = "Alaska", 
         "B6" = "JetBlue")
> lut
        AA         AS         B6 
"American"   "Alaska"  "JetBlue"
# Both the dplyr and hflights packages are loaded into workspace
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental", 
         "DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways", 
         "WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier", 
         "FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")

# Add the Carrier column to hflights
hflights$Carrier <- lut[hflights$UniqueCarrier]

# Glimpse at hflights
glimpse(hflights)
###########################Section 3 - The five verbs and select in more detail
select-remove cols-variable  select(df-tbl,Group-col to select, Sum)
mutate-build new col based on data-variable

filter-remove rows
arrange-reorder the rows

summarize-calcuate summary statistics

dplyr don't change original data, create a new copy
########################### Exercise select(df, var1, var2), elect(df, 1:4, -2) 
# You can also use : to select a range of variables and - to exclude some variables
########################### Choosing is not losing! The select verb
#$$$know colname, want to know corresponding index: which(colnames(df)=="nam")

# hflights is pre-loaded as a tbl, together with the necessary libraries.

# Print out a tbl with the four columns of hflights related to delay
select(hflights, ActualElapsedTime, AirTime, ArrDelay,DepDelay)

# Print out the columns Origin up to Cancelled of hflights
select(hflights,14:19) 

# Answer to last question: be concise!
select(hflights,-c(5:11))  #$$$ need c!!!
names(hflights)
##########################  Helper functions for variable selection
dplyr comes with a set of helper functions that can help you select groups of variables inside a select() call:

starts_with("X"): every name that starts with "X",
ends_with("X"): every name that ends with "X",
contains("X"): every name that contains "X",
matches("X"): every name that matches "X", where "X" can be a regular expression,
num_range("x", 1:5): the variables named x01, x02, x03, x04 and x05,
one_of(x): every name that appears in x, which should be a character vector.
Pay attention here: When you refer to columns directly inside select(), you don't use quotes. If you use the helper functions, you do use quotes.

########instructions
#Use select() and a helper function to print out a tbl that contains just ArrDelay and DepDelay of hflights.
#Use a combination of helper functions and variable names to print out only the UniqueCarrier, FlightNum, TailNum, Cancelled, and CancellationCode columns of hflights.
#Find the most concise way to return the following columns with select and its helper functions: DepTime, ArrTime, ActualElapsedTime, AirTime, ArrDelay, DepDelay. Use only helper functions!

# Print out a tbl containing just ArrDelay and DepDelay
select(hflights,contains("Delay"))

# Print out a tbl as described in the second instruction, using both helper functions and variable names
select(hflights, matches("UniqueCarrier"),contains("Num"),starts_with("Cancell"))

# Print out a tbl as described in the third instruction, using only helper functions.
select(hflights,contains("Tim"),contains("Del"))

############   Comparison to basic R
# Finish select call so that ex1d matches ex1r
ex1r <- hflights[c("TaxiIn", "TaxiOut", "Distance")]
ex1d <- select(hflights, contains("Taxi"),Distance)

# Finish select call so that ex2d matches ex2r
ex2r <- hflights[c("Year", "Month", "DayOfWeek", "DepTime", "ArrTime")]
ex2d <- select(hflights,1:6,-3)

# Finish select call so that ex3d matches ex3r
ex3r <- hflights[c("TailNum", "TaxiIn", "TaxiOut")]
ex3d <- select(hflights, starts_with("Ta"))

######################Section 4 - The second of five verbs: mutate
adds new variable, assembles from the dataset you already have
e.g. Volume=Length*Width*Height
#$$$   mudate(tbl, new_Col_Nmae=calculation) #don't need quotes
### mean(df$Col, na.rm=TRUE)
############# Mutating is creating  mutate(df, z = x + y)
#Create a new data frame, g1, which is the data frame hflights with an additional column: ActualGroundTime, the difference between ActualElapsedTime and AirTime.
#Extend g1 further, by adding an additional column GroundTime. This column is the sum of the TaxiIn and TaxiOut columns. Store the resulting data frame in g2. Check in the console that the GroundTime and ActualGroundTime columns are equal.
#Add a new variable to g2 named AverageSpeed that denotes the average speed that each plane flew in miles per hour. Save the resulting dataset as g3. Use the following formula: Distance / AirTime * 60.

#To calculate g2, make sure to pass g1 as the first argument to mutate().

# Add the new variable ActualGroundTime to a copy of hflights and save the result as g1.
g1<-mutate(hflights,ActualGroundTime=ActualElapsedTime-AirTime)

# Add the new variable GroundTime to g1. Save the result as g2.
g2<-mutate(g1, GroundTime=TaxiIn+TaxiOut)

# Add the new variable AverageSpeed to g2. Save the result as g3.
g3<-mutate(g2,AverageSpeed=Distance / AirTime * 60)
################# Add multiple variables using mutate
mutate() even allows you to use a new variable while creating a next variable in the same call. In this example, the new variable x is directly reused to create the new variable y:
mutate(my_df, x = a + b, y = x + c)

#Adapt the code that builds m1: add a variable loss_ratio, which is the ratio of loss to DepDelay.
#Create a tbl m2 from hflights by adding three variables:
 #TotalTaxi, which is the sum of TaxiIn and TaxiOut;
 #ActualGroundTime, which is the difference of ActualElapsedTime and AirTime;
 #Diff, the difference between the two newly created variables. This column should be zero for all observations!

# Add a second variable loss_ratio to the dataset: m1
m1 <- mutate(hflights, loss = ArrDelay - DepDelay,loss_ratio=loss/DepDelay)

# Add the three variables as described in the third instruction: m2
m2<-mutate(hflights,TotalTaxi=TaxiIn+TaxiOut,ActualGroundTime=ActualElapsedTime-AirTime,Diff=TotalTaxi-ActualGroundTime)

(A) hflights <- select(hflights, -(Year:Month), -(DepTime:Diverted))
(B) select(hflights, starts_with("D"))
########################  333333333  Filter and arrange

