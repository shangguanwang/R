#https://github.com/anirudhjayaraman/dplyr-data-manipulation/blob/master/dplyrTutorial

#tbl-a special type of data.frame
tbl_df(dataframe) #only display lines that will fit your window, cut rows and columns, display dims and names
glimpse(dataframe)

#### Convert data.frame to table  tbl_df()
# Convert the hflights data.frame into a hflights tbl
hlights<-tbl_df(hflights)

# Display the hflights tbl
hflights

# Create the object carriers
carriers<-hlights$UniqueCarrier
#### ????????????????????????????????Changing labels of hflights, part 1 of 2
#### df$New_col<-lut[df$old_col] ###########
lut <- c("AA" = "American", 
         "AS" = "Alaska", 
         "B6" = "JetBlue")
> lut
        AA         AS         B6 
"American"   "Alaska"  "JetBlue"
# Both the dplyr and hflights packages are loaded into workspace
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental", 
         "DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways", 
         "WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier", 
         "FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")

# Add the Carrier column to hflights
hflights$Carrier <- lut[hflights$UniqueCarrier]

# Glimpse at hflights
glimpse(hflights)
###########################Section 3 - The five verbs and select in more detail
select-remove cols-variable  select(df-tbl,Group-col to select, Sum)
mutate-build new col based on data-variable

filter-remove rows
arrange-reorder the rows

summarize-calcuate summary statistics

dplyr don't change original data, create a new copy
########################### Exercise select(df, var1, var2), elect(df, 1:4, -2) 
# You can also use : to select a range of variables and - to exclude some variables
########################### Choosing is not losing! The select verb
#$$$know colname, want to know corresponding index: which(colnames(df)=="nam")

# hflights is pre-loaded as a tbl, together with the necessary libraries.

# Print out a tbl with the four columns of hflights related to delay
select(hflights, ActualElapsedTime, AirTime, ArrDelay,DepDelay)

# Print out the columns Origin up to Cancelled of hflights
select(hflights,14:19) 

# Answer to last question: be concise!
select(hflights,-c(5:11))  #$$$ need c!!!
names(hflights)
##########################  Helper functions for variable selection
dplyr comes with a set of helper functions that can help you select groups of variables inside a select() call:

starts_with("X"): every name that starts with "X",
ends_with("X"): every name that ends with "X",
contains("X"): every name that contains "X",
matches("X"): every name that matches "X", where "X" can be a regular expression,
num_range("x", 1:5): the variables named x01, x02, x03, x04 and x05,
one_of(x): every name that appears in x, which should be a character vector.
Pay attention here: When you refer to columns directly inside select(), you don't use quotes. If you use the helper functions, you do use quotes.

########instructions
#Use select() and a helper function to print out a tbl that contains just ArrDelay and DepDelay of hflights.
#Use a combination of helper functions and variable names to print out only the UniqueCarrier, FlightNum, TailNum, Cancelled, and CancellationCode columns of hflights.
#Find the most concise way to return the following columns with select and its helper functions: DepTime, ArrTime, ActualElapsedTime, AirTime, ArrDelay, DepDelay. Use only helper functions!

# Print out a tbl containing just ArrDelay and DepDelay
select(hflights,contains("Delay"))

# Print out a tbl as described in the second instruction, using both helper functions and variable names
select(hflights, matches("UniqueCarrier"),contains("Num"),starts_with("Cancell"))

# Print out a tbl as described in the third instruction, using only helper functions.
select(hflights,contains("Tim"),contains("Del"))

############   Comparison to basic R
# Finish select call so that ex1d matches ex1r
ex1r <- hflights[c("TaxiIn", "TaxiOut", "Distance")]
ex1d <- select(hflights, contains("Taxi"),Distance)

# Finish select call so that ex2d matches ex2r
ex2r <- hflights[c("Year", "Month", "DayOfWeek", "DepTime", "ArrTime")]
ex2d <- select(hflights,1:6,-3)

# Finish select call so that ex3d matches ex3r
ex3r <- hflights[c("TailNum", "TaxiIn", "TaxiOut")]
ex3d <- select(hflights, starts_with("Ta"))

######################Section 4 - The second of five verbs: mutate
adds new variable, assembles from the dataset you already have
e.g. Volume=Length*Width*Height
#$$$   mudate(tbl, new_Col_Nmae=calculation) #don't need quotes
### mean(df$Col, na.rm=TRUE)
############# Mutating is creating  mutate(df, z = x + y)
#Create a new data frame, g1, which is the data frame hflights with an additional column: ActualGroundTime, the difference between ActualElapsedTime and AirTime.
#Extend g1 further, by adding an additional column GroundTime. This column is the sum of the TaxiIn and TaxiOut columns. Store the resulting data frame in g2. Check in the console that the GroundTime and ActualGroundTime columns are equal.
#Add a new variable to g2 named AverageSpeed that denotes the average speed that each plane flew in miles per hour. Save the resulting dataset as g3. Use the following formula: Distance / AirTime * 60.

#To calculate g2, make sure to pass g1 as the first argument to mutate().

# Add the new variable ActualGroundTime to a copy of hflights and save the result as g1.
g1<-mutate(hflights,ActualGroundTime=ActualElapsedTime-AirTime)

# Add the new variable GroundTime to g1. Save the result as g2.
g2<-mutate(g1, GroundTime=TaxiIn+TaxiOut)

# Add the new variable AverageSpeed to g2. Save the result as g3.
g3<-mutate(g2,AverageSpeed=Distance / AirTime * 60)
################# Add multiple variables using mutate
mutate() even allows you to use a new variable while creating a next variable in the same call. In this example, the new variable x is directly reused to create the new variable y:
mutate(my_df, x = a + b, y = x + c)

#Adapt the code that builds m1: add a variable loss_ratio, which is the ratio of loss to DepDelay.
#Create a tbl m2 from hflights by adding three variables:
 #TotalTaxi, which is the sum of TaxiIn and TaxiOut;
 #ActualGroundTime, which is the difference of ActualElapsedTime and AirTime;
 #Diff, the difference between the two newly created variables. This column should be zero for all observations!

# Add a second variable loss_ratio to the dataset: m1
m1 <- mutate(hflights, loss = ArrDelay - DepDelay,loss_ratio=loss/DepDelay)

# Add the three variables as described in the third instruction: m2
m2<-mutate(hflights,TotalTaxi=TaxiIn+TaxiOut,ActualGroundTime=ActualElapsedTime-AirTime,Diff=TotalTaxi-ActualGroundTime)

(A) hflights <- select(hflights, -(Year:Month), -(DepTime:Diverted))
(B) select(hflights, starts_with("D"))
########################  333333333  Filter and arrange
###################Section 5 - The third of five verbs: filter
Filter-filter rows based on content
filter(df, logical test:col==1) #will return all the rows that pass the test
############   Logical operators
x %in% c(a, b, c), TRUE if x is in the vector c(a, b, c)
#Print out all flights in hflights that traveled 3000 or more miles.
#Print out all flights in hflights flown by JetBlue, Southwest, or Delta.
#Extract from hflights all flights where taxiing took longer than the actual flight. 

# All flights that traveled 3000 miles or more
filter(hflights,Distance>=3000)

# All flights flown by one of JetBlue, Southwest, or Delta
filter(hflights,UniqueCarrier %in% c("JetBlue","Southwest","Delta"))

# All flights where taxiing took longer than flying
filter(hflights,TaxiIn + TaxiOut > AirTime)
################## Combining tests using boolean operators
& (and), | (or), and ! (not)

you can also pass several logical tests to filter(), separated by commas. The following two calls are completely equivalent:
filter(df, a > 0 & b > 0)
filter(df, a > 0, b > 0)

This example keeps the observations in df for which the variable x is not NA:
filter(df, !is.na(x))

#####################
#Use R's logical and boolean operators to select just the rows where a flight left before 5:00 am (500) or arrived after 10:00 pm (2200).
#Print out all of the flights that departed late but arrived ahead of schedule. Use DepDelay and ArrDelay for this.
#Find all of the flights that were cancelled after being delayed. These are flights that were cancelled, while having a DepDelay greater than zero.

# All flights that departed before 5am or arrived after 10pm
filter(hflights, DepTime<500 | ArrTime>2200)

# All flights that departed late but arrived ahead of schedule
filter(hflights, DepDelay>0 & ArrDelay<0)

# All flights that were cancelled after being delayed
filter(hflights, Cancelled==1 &DepDelay>0)

#First, use filter() to select the flights that had JFK as their destination and save this result to c1.
#Second, add a new column named Date to c1: paste() together the Year, Month and DayofMonth variables, seperate them by a "-" by using the sep attribute of paste(). Save the resulting data frame as c2.
#Finally, select some columns to provide an overview: Date, DepTime, ArrTime and TailNum, in this order. Do not assign the resulting database to a variable; just print it to the console.

# Select the flights that had JFK as their destination: c1
c1 <- filter(hflights, Dest == "JFK")

# Combine the Year, Month and DayofMonth variables to create a Date column: c2
c2 <- mutate(c1, Date = paste(Year, Month, DayofMonth, sep = "-"))

# Print out a selection of columns of c2
select(c2, Date, DepTime, ArrTime, TailNum)

#########
How many weekend flights flew a distance of more than 1000 miles but had a total taxiing time below 15 minutes?
filter(hflights, DayOfWeek %in% c(6,7), Distance > 1000, TaxiIn + TaxiOut < 15)

############################Section 6 - Almost there: the arrange verb
arrange(df,Col_name) row based on content, arranged by col
a1<-select(df,variable1,contains("V2name")
arrange(a1,Col_arranged_by, if_Col_same_Arrange_By_Col2)
############## Exercise1 Arranging your data
arrange() can be used to rearrange rows according to any type of data. If you pass arrange() a character variable, for example, R will rearrange the rows in alphabetical order according to values of the variable. If you pass a factor variable, R will rearrange the rows according to the order of the levels in your factor (running levels() on the variable reveals this order).
#Arrange dtc, by departure delays so that the shortest departure delay is at the top of the data set.
#Arrange dtc so that flights that were cancelled for the same reason appear next to each other.
#Arrange dtc so that flights by the same carrier appear next to each other. Within each carrier, flights that have smaller departure delays appear before flights that have higher departure delays. Do this in a one-liner.

# Definition of dtc
dtc <- filter(hflights, Cancelled == 1, !is.na(DepDelay))

# Arrange dtc by departure delays
arrange(dtc,DepDelay)

# Arrange dtc so that cancellation reasons are grouped
arrange(dtc,CancellationCode)

# Arrange dtc according to carrier and departure delays
arrange(dtc,UniqueCarrier,DepDelay)

########################################  Reverse the order of arranging
#By default, arrange() arranges the rows from smallest to largest. Rows with the smallest value of the variable will appear at the top of the data set. You can reverse this behavior with the desc() function. arrange() will reorder the rows from largest to smallest values of a variable if you wrap the variable name in desc() before passing it to arrange()
#Arrange hflights so that flights by the same carrier appear next to each other and within each carrier, flights that have larger departure delays appear before flights that have smaller departure delays.
#Arrange the flights in hflights by their total delay (the sum of DepDelay and ArrDelay). Try to do this directly inside arrange().

# Arrange according to carrier and decreasing departure delays
arrange(hflights,UniqueCarrier,desc(DepDelay))

# Arrange flights by total delay (normal order).
arrange(hflights,DepDelay+ArrDelay)
#????????   What steps do you take to print a only the TailNum of hflights, only for flights that departed too late, sorted by total taxiing time?
filter(), then mutate(), arrange() and finally select().
# First select a threshold for departure delay by finding max DepDelay
max(filter(select(hflights, DepDelay), !is.na(DepDelay)))
select(arrange(filter(hflights, DepDelay > 360), TaxiIn + TaxiOut), TailNum)
