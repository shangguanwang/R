###############some options can be specified globally
library(MASS)
par(mfrow=c(1,2)) #put multiple graphs together
par(cex.main=0.8) #text size of title
plot(df$x, df$y)
title("some text")
############## options that can only be specified locally
library(MASS)
index<-which(df$variable==after) #which gives the index
indexA<-which(whiteside$Insul=="After")
indexB<-which(whhiteside$Insul=="Before")
x<-whiteside$Temp
y<-whiteside$Gas
plot(x[indexA],y[indexA], type="o"(lines overlaid with points-line&points), pch=16, xlim=range(x),ylim=range(y),xlab="sometext",ylab="some text")  #high-level function
lines(x[indexB],y[indexB], type="o",pch=1) #low-level function
legend("text", pch=c(1,16),legend=c("text1","text2"))
title("sometext")
#high-level function generates an initial plot, while low=level functions like points, lines add details to an existing plots
#type="n" no plot, set up an initial empty plot
############### practice
#Specifically, a call to the par() function with no parameters specified will return a list whose element names each specify a graphics parameter and whose element values specify the corresponding default values of these parameters. These parameters may be set by a call in the form par(name = value) where name is the name of the parameter to be set and value is the value to be assigned to this parameter.
#Capture the return from the par() function as the character vector plot_pars.
#Show the names of these graphics parameters by calling names() on plot_pars.
#Show the number of parameters in this list by calling length()

# Assign the return value from the par() function to plot_pars
plot_pars<-par()   #empty par() generates a data table

# Display the names of the par() function's list elements
names(plot_pars)

# Display the number of par() function list elements
length(plot_pars)

#########################Exploring the type option
#mfrow, which specifies the numbers of rows and columns in an array of plots. Valid values for this parameter are two-element numerical vectors, whose first element specifies the number of rows in the plot array and the second element specifies the number of rows.
#The specific type values used here are:
#"p" for "points"
#"l" for "lines"
#"o" for "overlaid" (i.e., lines overlaid with points)
#"s" for "steps"
######################## Practice
#Use the par() function to set the mfrow parameter for a two-by-two plot array.
#Generate a plot of brain weights from the Animals2 data frame, with observations plotted as points and the title "points" by calling the title() function.
#Repeat, with observations plotted as lines and the title "lines".
#Repeat, with observations plotted as overlaid points and lines and the title "overlaid".
#Repeat, with observations plotted as steps and the title "steps".

# Set up a 2-by-2 plot array
par(mfrow=c(2,2))

# Plot the Animals2 brain weight data as points
plot(Animals2$brain,type="p")

# Add the title
title("points")

# Plot the brain weights with lines
plot(Animals2$brain,type="l")

# Add the title
title("lines")

# Plot the brain weights as lines overlaid with points
plot(Animals2$brain,type="o")

# Add the title
title("overlaid")

# Plot the brain weights as steps
plot(Animals2$brain,type="s")

# Add the title
title("steps")
#################################################################
#type = "n" is useful when we are plotting data from multiple sources on a common set of axes. In such cases, we can compute ranges for the x- and y-axes so that all data points will appear on the plot, and then add the data with subsequent calls to points() or lines() as appropriate.
#This exercise asks you to generate a plot that compares mileage vs. horsepower data from two different sources: the mtcars data frame in the datasets package and the Cars93 data frame in the MASS package. To distinguish the different results from these data sources, the graphics parameter pch is used to specify point shapes. 
#Compute max_hp as the maximum of Horsepower from the Cars93 data frame and hp from the mtcars data frame.
#Compute max_mpg as the maximum of MPG.city from the Cars93 data frame, MPG.highway from this data frame, and mpg from the mtcars data frame.
#Using the type = "n" option, set up a plot with an x-axis that runs from zero to max_hp and a y-axis that runs from zero to max_mpg, with labels Horsepower and Miles per gallon.
#Using the points() function, add mpg vs. hp from the mtcars data frame to the plot as open circles (pch = 1).
#Using the points() function, add MPG.city vs. Horsepower to the plot as solid squares (pch = 15).
#Using the points() function, add MPG.highway vs. Horsepower to the plot as open triangles pointing upwards (pch = 6)

# Compute max_hp
max_hp <- max(Cars93$Horsepower, mtcars$hp)

# Compute max_mpg
max_mpg <- max(Cars93$MPG.city, Cars93$MPG.highway, mtcars$mpg)

# Create plot with type = "n"               
plot(max_hp,max_mpg,
     type = "n", xlim = c(0, max_hp),
     ylim = c(0,max_mpg), xlab = "Horsepower",
     ylab = "Miles per gallon")

# Add open circles to plot
points(mtcars$hp, mtcars$mpg, pch = 1)

# Add solid squares to plot
points(Cars93$Horsepower,Cars93$MPG.city,pch=15)

# Add open triangles to plot
points(Cars93$Horsepower,Cars93$MPG.highway,pch=6)
##################################################################adding lines and points to plots fuva
lines(density(df$variable), lwd=2, col="blue")
abline(a=intercept,b=intercept,lty=2, lwd=2) #straight line

lty = 1 specifying solid lines, lty = 2 specifying dashed lines, and lty = 3 specifying dotted lines.
Create a numerical variable x with 200 evenly-spaced values from 0 to 10.
Using the dnorm() function, generate a vector gauss1 of Gaussian probability densities for this range of x values, with mean 2 and standard deviation 0.2.
Using the dnorm() function, generate a vector gauss2 of Gaussian probability densities for this range of x values, with mean 4 and standard deviation 0.5.
Generate a plot of gauss1 vs. x with lines and a y-axis label "Gaussian probability density".
Using the lines() function, add a second dashed line for gauss2 vs. x with relative width 3.

# Create the numerical vector x
x <- seq(0, 10, length =200)

# Compute the Gaussian density for x with mean 2 and standard deviation 0.2
gauss1 <- dnorm(x, mean = 2, sd = 0.2)

# Compute the Gaussian density with mean 4 and standard deviation 0.5
gauss2<-dnorm(x,mean=4,sd=0.5)

# Plot the first Gaussian density
plot(x, gauss1,type="l", ylab="Gaussian probability density")

# Add lines for the second Gaussian density
lines(x,gauss2, lty=2,lwd=3)
#########################################
#Create an empty plot of mpg vs. hp from the mtcars data frame, with axis labels "Horsepower" and "Gas mileage".
#Using the points() function, add the mpg vs. hp data, with pch specified by the numeric values of cyl.
#Repeat both of the previous steps, except with pch specified by the character values of cyl.

# Create an empty plot using type = "n"
plot(mtcars$hp,mtcars$mpg,type="n", xlab="Horsepower",ylab="Gas mileage")

# Add points with shapes determined by cylinder number
points(mtcars$hp,mtcars$mpg,pch = mtcars$cyl)

# Create a second empty plot
plot(mtcars$hp,mtcars$mpg,type="n", xlab="Horsepower",ylab="Gas mileage")

# Add points with shapes as cylinder characters
points(mtcars$hp,mtcars$mpg,pch = as.character(mtcars$cyl))
##############################Adding trend lines from linear regression models
#the command abline(a = 0, b = 1) adds an equality reference line with zero intercept and unit (i.e. 1) slope: points for which y = x fall on this reference line, while points with y > x fall above it, and points with y < x fall below it.
#An alternative way of specifying these parameters is through a linear regression model that determines them from data. One common application is to generate a scatterplot of y versus x, then fit a linear model that predicts y from x, and finally call abline() to add this best fit line to the plot.
#The standard R function that fits linear regression models is lm(), which supports the formula interface. Thus, to fit a linear model that predicts y from x in the data frame df, the call would be lm(y ~ x, data = df).

#Use the lm() function to create linear_model, a linear regression model that predicts Gas from Temp from the whiteside data frame.
#Generate a scatterplot of Gas vs. Temp.
#Using the abline() function, add a dashed reference line that shows the predictions of linear_model.

# Build a linear regression model for the whiteside data
linear_model<-lm(Gas~Temp,data=whiteside)

# Create a Gas vs. Temp scatterplot from the whiteside data
plot(whiteside$Temp,whiteside$Gas)

# Use abline() to add the linear regression line
abline(linear_model,lty=2)
##################################################### Adding text to plots
Axis lables: xlab(),ylab()
Titles: plot(density(df$col), main="XX: \n YY" # create two-line title with\n
Legends
Text in plot itself: text(x,y, labels, adj, srt=30, col="red". cex=1.2,font=2) #x and y where the text will be added. #adj is alignment =0.5 default, adj=1 right justifies text. 
#srt: angles of orientation 
#cex=text size, 1.2 = 20% larger than original 

#Create a scatterplot of MPG.city vs. Horsepower from the Cars93 data frame, with points represented as solid squares. Recall that the pch value for solid squares is 15.
#Create the variable index3 using the which() function that identifies all 3-cylinder cars.
#Label the Make of each 3-cylinder car in the Cars93 data frame using the text() function.
#Use the zoom feature in the Plots window to see this plot more clearly.

# Create MPG.city vs. Horsepower plot with solid squares
plot(Cars93$Horsepower, Cars93$MPG.city,pch=15)

# Create index3, pointing to 3-cylinder cars
index3<-which(Cars93$Cylinders==3)

# Add text giving names of cars next to data points
text(x = Cars93$Horsepower[index3], 
     y = Cars93$MPG.city[index3],
     labels = Cars93$Make[index3],
     adj = 0)
####################################################  Adjusting text position, size, and font
#font = 1 is the default text font (neither italic nor bold), font = 2 specifies bold face text, font = 3 specifies italic text, and font = 4 specifies both bold and italic text.
#Create a plot of MPG.city vs. Horsepower from the Cars93 data frame, with data represented as open circles.
#Construct the variable index3 using the which() function that identifies the row numbers containing all 3-cylinder cars.
#Use the points() function to overlay solid circles on top of all points in the plot that represent 3-cylinder cars.
#Use the text() function with the Make variable as before to add labels to the right of the 3-cylinder cars, but now use adj = -0.2 to move the labels further to the right, use the cex argument to increase the label size by 20 percent, and use the font argument to make the labels bold italic.

# Plot MPG.city vs. Horsepower as open circles
plot(Cars93$Horsepower, Cars93$MPG.city, pch = 1)

# Create index3, pointing to 3-cylinder cars
index3 <- which(Cars93$Cylinders == 3)

# Highlight 3-cylinder cars as solid circles
points(Cars93$Horsepower[index3],
       Cars93$MPG.city[index3],
       pch = 16)

# Add car names, offset from points, with larger bold text
text(Cars93$Horsepower[index3],
     Cars93$MPG.city[index3],
     Cars93$Make[index3],
     adj = -0.2, cex = 1.2, font = 4)
     ######################################################
     
